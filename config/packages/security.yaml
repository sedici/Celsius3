security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        legacy:
            algorithm: sha512
            encode_as_base64: false
            iterations: 1

        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            migrate_from:
                - legacy



#    encoders:
#        Symfony\Component\Security\Core\User\UserInterface:
#        sha512

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        celsius3_user_provider:
            id: Celsius3\Security\UserProvider
#            entity:
#                class: Celsius3\Entity\BaseUser
#                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            pattern: ^/
            form_login:
                provider: celsius3_user_provider
#                csrf_token_generator: security.csrf.token_manager
                login_path: security_login
                check_path: security_login
                failure_handler: Celsius3\Handler\CustomAuthenticationFailureHandler
                success_handler: Celsius3\Handler\CustomAuthenticationSuccessHandler
                default_target_path: user_index
#                use_referer: true
                enable_csrf: true
            login_throttling:
                max_attempts: 3
                interval: '15 minutes'
            logout:
                path: security_logout
                target: public_index
                success_handler: Celsius3\Handler\CustomLogoutSuccessHandler
#            anonymous: true
            switch_user: { role: ROLE_ADMIN }

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        oauth_token:
            pattern: ^/api/oauth/v2/token
            security: false

        oauth_authorize:
#            logout_on_user_change: true
            pattern: ^/api/oauth/v2/auth
            form_login:
                provider: celsius3_user_provider
                check_path: security_login
                login_path: security_login
            anonymous: false

#        api:
#            pattern: ^/.*/api
#            fos_oauth: true
#            stateless: true
#            anonymous: false

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(es|en|pt)/api/oauth, role: PUBLIC_ACCESS }
        - { path: ^/(es|en|pt)/api, role: IS_AUTHENTICATED_FULLY }
        - { path: ^/(es|en|pt)/public/registration, role: PUBLIC_ACCESS }
        - { path: ^/(es|en|pt)/public, role: PUBLIC_ACCESS }
        - { path: ^/(es|en|pt)/superadmin, role: ROLE_SUPER_ADMIN }
        - { path: ^/(es|en|pt)/admin, role: ROLE_ORDER_MANAGER }
        - { path: ^/(es|en|pt)/bibliotecario, role: ROLE_LIBRARIAN }
        - { path: ^/(es|en|pt)/user, role: ROLE_USER }
        - { path: ^/(es|en|pt)/migration, role: ROLE_MIGRATOR }

    role_hierarchy:
        ROLE_ADMIN: [ ROLE_LIBRARIAN, ROLE_ORDER_MANAGER ]
        ROLE_LIBRARIAN: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        ROLE_ORDER_MANAGER: ROLE_USER
        ROLE_STATISTICS: ROLE_ADMIN
        ROLE_TICKET: ROLE_ADMIN
        ROLE_TECHNICAL: ROLE_SUPER_ADMIN